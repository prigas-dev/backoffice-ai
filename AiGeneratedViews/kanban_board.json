{
  "queries": [
    {
      "sql": "SELECT t.id, t.title, t.description, t.status, t.priority, t.due_date, u.id as user_id, u.name as user_name FROM tasks t LEFT JOIN user_tasks ut ON t.id = ut.task_id LEFT JOIN users u ON ut.user_id = u.id WHERE t.deleted_at IS NULL ORDER BY t.status, t.priority DESC",
      "mode": "multiple-rows",
      "mapToProp": "tasks"
    },
    {
      "sql": "SELECT id, name FROM users WHERE deleted_at IS NULL ORDER BY name",
      "mode": "multiple-rows",
      "mapToProp": "users"
    }
  ],
  "component": {
    "id": "kanban_board",
    "code": "import React, { useState, useMemo } from 'react';\nimport { Card, Container, Row, Col, Badge, Form, Button } from 'react-bootstrap';\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: number;\n  due_date: string;\n  user_id: number | null;\n  user_name: string | null;\n}\n\ninterface User {\n  id: number;\n  name: string;\n}\n\ninterface ComponentProps {\n  tasks: Task[];\n  users: User[];\n}\n\nexport function Component({ tasks, users }: ComponentProps) {\n  const [selectedUserId, setSelectedUserId] = useState\u003cnumber | null\u003e(null);\n  \n  const filteredTasks = useMemo(() =\u003e {\n    if (selectedUserId === null) return tasks;\n    return tasks.filter(task =\u003e task.user_id === selectedUserId);\n  }, [tasks, selectedUserId]);\n\n  const todoTasks = filteredTasks.filter(task =\u003e task.status === 'todo');\n  const inProgressTasks = filteredTasks.filter(task =\u003e task.status === 'in_progress');\n  const doneTasks = filteredTasks.filter(task =\u003e task.status === 'done');\n\n  const getPriorityBadge = (priority: number) =\u003e {\n    if (priority \u003e= 3) return \u003cBadge bg=\"danger\"\u003eHigh\u003c/Badge\u003e;\n    if (priority === 2) return \u003cBadge bg=\"warning\"\u003eMedium\u003c/Badge\u003e;\n    return \u003cBadge bg=\"info\"\u003eLow\u003c/Badge\u003e;\n  };\n\n  const formatDate = (dateString: string | null) =\u003e {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  return (\n    \u003cContainer fluid\u003e\n      \u003cRow className=\"mb-4\"\u003e\n        \u003cCol\u003e\n          \u003ch1\u003eKanban Board\u003c/h1\u003e\n        \u003c/Col\u003e\n        \u003cCol xs={12} md={3}\u003e\n          \u003cForm.Group\u003e\n            \u003cForm.Label\u003eFilter by User\u003c/Form.Label\u003e\n            \u003cForm.Select \n              value={selectedUserId || ''} \n              onChange={(e) =\u003e setSelectedUserId(e.target.value ? Number(e.target.value) : null)}\n            \u003e\n              \u003coption value=\"\"\u003eAll Users\u003c/option\u003e\n              {users.map(user =\u003e (\n                \u003coption key={user.id} value={user.id}\u003e{user.name}\u003c/option\u003e\n              ))}\n            \u003c/Form.Select\u003e\n          \u003c/Form.Group\u003e\n        \u003c/Col\u003e\n      \u003c/Row\u003e\n\n      \u003cRow\u003e\n        \u003cCol md={4}\u003e\n          \u003cCard className=\"mb-4\" bg=\"light\"\u003e\n            \u003cCard.Header className=\"bg-secondary text-white\"\u003e\n              \u003ch4\u003eTo Do ({todoTasks.length})\u003c/h4\u003e\n            \u003c/Card.Header\u003e\n            \u003cCard.Body style={{ maxHeight: '70vh', overflowY: 'auto' }}\u003e\n              {todoTasks.map(task =\u003e (\n                \u003cCard key={task.id} className=\"mb-2\"\u003e\n                  \u003cCard.Body\u003e\n                    \u003cCard.Title\u003e{task.title}\u003c/Card.Title\u003e\n                    \u003cCard.Text\u003e{task.description}\u003c/Card.Text\u003e\n                    \u003cdiv className=\"d-flex justify-content-between align-items-center\"\u003e\n                      {getPriorityBadge(task.priority)}\n                      {task.user_name \u0026\u0026 (\n                        \u003cBadge bg=\"secondary\"\u003e{task.user_name}\u003c/Badge\u003e\n                      )}\n                    \u003c/div\u003e\n                    {task.due_date \u0026\u0026 (\n                      \u003cdiv className=\"mt-2 text-muted\"\u003eDue: {formatDate(task.due_date)}\u003c/div\u003e\n                    )}\n                  \u003c/Card.Body\u003e\n                \u003c/Card\u003e\n              ))}\n              {todoTasks.length === 0 \u0026\u0026 \u003cp className=\"text-center text-muted\"\u003eNo tasks\u003c/p\u003e}\n            \u003c/Card.Body\u003e\n          \u003c/Card\u003e\n        \u003c/Col\u003e\n\n        \u003cCol md={4}\u003e\n          \u003cCard className=\"mb-4\" bg=\"light\"\u003e\n            \u003cCard.Header className=\"bg-primary text-white\"\u003e\n              \u003ch4\u003eIn Progress ({inProgressTasks.length})\u003c/h4\u003e\n            \u003c/Card.Header\u003e\n            \u003cCard.Body style={{ maxHeight: '70vh', overflowY: 'auto' }}\u003e\n              {inProgressTasks.map(task =\u003e (\n                \u003cCard key={task.id} className=\"mb-2\"\u003e\n                  \u003cCard.Body\u003e\n                    \u003cCard.Title\u003e{task.title}\u003c/Card.Title\u003e\n                    \u003cCard.Text\u003e{task.description}\u003c/Card.Text\u003e\n                    \u003cdiv className=\"d-flex justify-content-between align-items-center\"\u003e\n                      {getPriorityBadge(task.priority)}\n                      {task.user_name \u0026\u0026 (\n                        \u003cBadge bg=\"secondary\"\u003e{task.user_name}\u003c/Badge\u003e\n                      )}\n                    \u003c/div\u003e\n                    {task.due_date \u0026\u0026 (\n                      \u003cdiv className=\"mt-2 text-muted\"\u003eDue: {formatDate(task.due_date)}\u003c/div\u003e\n                    )}\n                  \u003c/Card.Body\u003e\n                \u003c/Card\u003e\n              ))}\n              {inProgressTasks.length === 0 \u0026\u0026 \u003cp className=\"text-center text-muted\"\u003eNo tasks\u003c/p\u003e}\n            \u003c/Card.Body\u003e\n          \u003c/Card\u003e\n        \u003c/Col\u003e\n\n        \u003cCol md={4}\u003e\n          \u003cCard className=\"mb-4\" bg=\"light\"\u003e\n            \u003cCard.Header className=\"bg-success text-white\"\u003e\n              \u003ch4\u003eDone ({doneTasks.length})\u003c/h4\u003e\n            \u003c/Card.Header\u003e\n            \u003cCard.Body style={{ maxHeight: '70vh', overflowY: 'auto' }}\u003e\n              {doneTasks.map(task =\u003e (\n                \u003cCard key={task.id} className=\"mb-2\"\u003e\n                  \u003cCard.Body\u003e\n                    \u003cCard.Title\u003e{task.title}\u003c/Card.Title\u003e\n                    \u003cCard.Text\u003e{task.description}\u003c/Card.Text\u003e\n                    \u003cdiv className=\"d-flex justify-content-between align-items-center\"\u003e\n                      {getPriorityBadge(task.priority)}\n                      {task.user_name \u0026\u0026 (\n                        \u003cBadge bg=\"secondary\"\u003e{task.user_name}\u003c/Badge\u003e\n                      )}\n                    \u003c/div\u003e\n                    {task.due_date \u0026\u0026 (\n                      \u003cdiv className=\"mt-2 text-muted\"\u003eDue: {formatDate(task.due_date)}\u003c/div\u003e\n                    )}\n                  \u003c/Card.Body\u003e\n                \u003c/Card\u003e\n              ))}\n              {doneTasks.length === 0 \u0026\u0026 \u003cp className=\"text-center text-muted\"\u003eNo tasks\u003c/p\u003e}\n            \u003c/Card.Body\u003e\n          \u003c/Card\u003e\n        \u003c/Col\u003e\n      \u003c/Row\u003e\n    \u003c/Container\u003e\n  );\n}\n"
  }
}