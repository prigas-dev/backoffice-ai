{
  "queries": [
    {
      "sql": "SELECT t.id, t.title, t.description, t.status, t.priority, t.due_date, u.name as user_name FROM tasks t JOIN user_tasks ut ON t.id = ut.task_id JOIN users u ON ut.user_id = u.id WHERE u.name = 'Bob Smith' AND t.deleted_at IS NULL ORDER BY t.due_date ASC",
      "mode": "multiple-rows",
      "mapToProp": "tasks"
    }
  ],
  "component": {
    "id": "bob_smith_tasks",
    "code": "import React from 'react';\nimport { Table, Badge, Card } from 'react-bootstrap';\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: number;\n  due_date: string;\n  user_name: string;\n}\n\ninterface ComponentProps {\n  tasks: Task[];\n}\n\nexport const Component: React.FC\u003cComponentProps\u003e = ({ tasks }) =\u003e {\n  const getStatusBadge = (status: string) =\u003e {\n    switch (status) {\n      case 'done':\n        return \u003cBadge bg=\"success\"\u003eDone\u003c/Badge\u003e;\n      case 'in_progress':\n        return \u003cBadge bg=\"warning\"\u003eIn Progress\u003c/Badge\u003e;\n      case 'todo':\n        return \u003cBadge bg=\"secondary\"\u003eTo Do\u003c/Badge\u003e;\n      default:\n        return \u003cBadge bg=\"info\"\u003e{status}\u003c/Badge\u003e;\n    }\n  };\n\n  const getPriorityBadge = (priority: number) =\u003e {\n    switch (priority) {\n      case 1:\n        return \u003cBadge bg=\"danger\"\u003eHigh\u003c/Badge\u003e;\n      case 2:\n        return \u003cBadge bg=\"warning\"\u003eMedium\u003c/Badge\u003e;\n      case 3:\n        return \u003cBadge bg=\"info\"\u003eLow\u003c/Badge\u003e;\n      default:\n        return \u003cBadge bg=\"secondary\"\u003e{priority}\u003c/Badge\u003e;\n    }\n  };\n\n  const formatDate = (dateString: string) =\u003e {\n    if (!dateString) return 'No due date';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  const isOverdue = (dateString: string) =\u003e {\n    if (!dateString) return false;\n    const dueDate = new Date(dateString);\n    const today = new Date();\n    return dueDate \u003c today \u0026\u0026 dateString !== 'done';\n  };\n\n  return (\n    \u003cCard\u003e\n      \u003cCard.Header as=\"h5\"\u003eTasks Assigned to Bob Smith\u003c/Card.Header\u003e\n      \u003cCard.Body\u003e\n        {tasks.length === 0 ? (\n          \u003cp\u003eBob Smith has no tasks assigned.\u003c/p\u003e\n        ) : (\n          \u003cTable striped bordered hover responsive\u003e\n            \u003cthead\u003e\n              \u003ctr\u003e\n                \u003cth\u003eTitle\u003c/th\u003e\n                \u003cth\u003eDescription\u003c/th\u003e\n                \u003cth\u003eStatus\u003c/th\u003e\n                \u003cth\u003ePriority\u003c/th\u003e\n                \u003cth\u003eDue Date\u003c/th\u003e\n              \u003c/tr\u003e\n            \u003c/thead\u003e\n            \u003ctbody\u003e\n              {tasks.map((task) =\u003e (\n                \u003ctr key={task.id}\u003e\n                  \u003ctd\u003e{task.title}\u003c/td\u003e\n                  \u003ctd\u003e{task.description}\u003c/td\u003e\n                  \u003ctd\u003e{getStatusBadge(task.status)}\u003c/td\u003e\n                  \u003ctd\u003e{getPriorityBadge(task.priority)}\u003c/td\u003e\n                  \u003ctd\u003e\n                    \u003cspan className={isOverdue(task.due_date) ? 'text-danger fw-bold' : ''}\u003e\n                      {formatDate(task.due_date)}\n                      {isOverdue(task.due_date) \u0026\u0026 ' (Overdue)'}\n                    \u003c/span\u003e\n                  \u003c/td\u003e\n                \u003c/tr\u003e\n              ))}\n            \u003c/tbody\u003e\n          \u003c/Table\u003e\n        )}\n      \u003c/Card.Body\u003e\n    \u003c/Card\u003e\n  );\n};\n"
  }
}