{
  "queries": [
    {
      "sql": "SELECT t.*, u.name as assigned_user_name, c.name as category_name FROM tasks t LEFT JOIN user_tasks ut ON t.id = ut.task_id LEFT JOIN users u ON ut.user_id = u.id LEFT JOIN task_categories tc ON t.id = tc.task_id LEFT JOIN categories c ON tc.category_id = c.id WHERE date(t.due_date) = date('now', '+1 day') AND t.deleted_at IS NULL ORDER BY t.priority DESC, t.due_date ASC",
      "mode": "multiple-rows",
      "mapToProp": "tasks"
    }
  ],
  "component": {
    "id": "tasks_due_tomorrow",
    "code": "import React from 'react';\nimport { Table, Badge, Card } from 'react-bootstrap';\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: number;\n  due_date: string;\n  assigned_user_name: string | null;\n  category_name: string | null;\n}\n\ninterface ComponentProps {\n  tasks: Task[];\n}\n\nexport const Component: React.FC\u003cComponentProps\u003e = ({ tasks }) =\u003e {\n  const getPriorityBadge = (priority: number) =\u003e {\n    switch (priority) {\n      case 1:\n        return \u003cBadge bg=\"success\"\u003eLow\u003c/Badge\u003e;\n      case 2:\n        return \u003cBadge bg=\"warning\"\u003eMedium\u003c/Badge\u003e;\n      case 3:\n        return \u003cBadge bg=\"danger\"\u003eHigh\u003c/Badge\u003e;\n      default:\n        return \u003cBadge bg=\"secondary\"\u003eUnknown\u003c/Badge\u003e;\n    }\n  };\n\n  const getStatusBadge = (status: string) =\u003e {\n    switch (status.toLowerCase()) {\n      case 'todo':\n      case 'to do':\n      case 'not started':\n        return \u003cBadge bg=\"secondary\"\u003eTo Do\u003c/Badge\u003e;\n      case 'in progress':\n        return \u003cBadge bg=\"primary\"\u003eIn Progress\u003c/Badge\u003e;\n      case 'done':\n      case 'completed':\n        return \u003cBadge bg=\"success\"\u003eCompleted\u003c/Badge\u003e;\n      case 'blocked':\n        return \u003cBadge bg=\"danger\"\u003eBlocked\u003c/Badge\u003e;\n      default:\n        return \u003cBadge bg=\"info\"\u003e{status}\u003c/Badge\u003e;\n    }\n  };\n\n  const formatDate = (dateString: string) =\u003e {\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n\n  return (\n    \u003cCard\u003e\n      \u003cCard.Header className=\"bg-primary text-white\"\u003e\n        \u003ch4\u003eTasks Due Tomorrow\u003c/h4\u003e\n      \u003c/Card.Header\u003e\n      \u003cCard.Body\u003e\n        {tasks.length === 0 ? (\n          \u003cdiv className=\"text-center p-4\"\u003e\n            \u003ch5\u003eNo tasks due tomorrow\u003c/h5\u003e\n          \u003c/div\u003e\n        ) : (\n          \u003cTable striped hover responsive\u003e\n            \u003cthead\u003e\n              \u003ctr\u003e\n                \u003cth\u003eTitle\u003c/th\u003e\n                \u003cth\u003eDescription\u003c/th\u003e\n                \u003cth\u003eStatus\u003c/th\u003e\n                \u003cth\u003ePriority\u003c/th\u003e\n                \u003cth\u003eDue Date\u003c/th\u003e\n                \u003cth\u003eAssigned To\u003c/th\u003e\n                \u003cth\u003eCategory\u003c/th\u003e\n              \u003c/tr\u003e\n            \u003c/thead\u003e\n            \u003ctbody\u003e\n              {tasks.map((task) =\u003e (\n                \u003ctr key={task.id}\u003e\n                  \u003ctd\u003e{task.title}\u003c/td\u003e\n                  \u003ctd\u003e\n                    {task.description ? (\n                      task.description.length \u003e 50 ? (\n                        \u003cspan title={task.description}\u003e\n                          {task.description.substring(0, 50)}...\n                        \u003c/span\u003e\n                      ) : (\n                        task.description\n                      )\n                    ) : (\n                      \u003cspan className=\"text-muted\"\u003eNo description\u003c/span\u003e\n                    )}\n                  \u003c/td\u003e\n                  \u003ctd\u003e{getStatusBadge(task.status)}\u003c/td\u003e\n                  \u003ctd\u003e{getPriorityBadge(task.priority)}\u003c/td\u003e\n                  \u003ctd\u003e{formatDate(task.due_date)}\u003c/td\u003e\n                  \u003ctd\u003e\n                    {task.assigned_user_name || (\n                      \u003cspan className=\"text-muted\"\u003eUnassigned\u003c/span\u003e\n                    )}\n                  \u003c/td\u003e\n                  \u003ctd\u003e\n                    {task.category_name || (\n                      \u003cspan className=\"text-muted\"\u003eUncategorized\u003c/span\u003e\n                    )}\n                  \u003c/td\u003e\n                \u003c/tr\u003e\n              ))}\n            \u003c/tbody\u003e\n          \u003c/Table\u003e\n        )}\n      \u003c/Card.Body\u003e\n      \u003cCard.Footer\u003e\n        \u003csmall className=\"text-muted\"\u003e\n          Total tasks due tomorrow: {tasks.length}\n        \u003c/small\u003e\n      \u003c/Card.Footer\u003e\n    \u003c/Card\u003e\n  );\n};\n"
  }
}