{
  "queries": [
    {
      "sql": "SELECT t.*, u.name as user_name FROM tasks t JOIN user_tasks ut ON t.id = ut.task_id JOIN users u ON ut.user_id = u.id WHERE u.name = 'Alice Johnson' AND t.deleted_at IS NULL ORDER BY t.due_date ASC",
      "mode": "multiple-rows",
      "mapToProp": "tasks"
    }
  ],
  "component": {
    "id": "alice_johnson_tasks",
    "code": "import React, { useState } from 'react';\nimport { Table, Badge, Card, Form, Button } from 'react-bootstrap';\n\ninterface Task {\n  id: number;\n  title: string;\n  description: string;\n  status: string;\n  priority: number;\n  due_date: string;\n  created_at: string;\n  updated_at: string;\n  user_name: string;\n}\n\ninterface ComponentProps {\n  tasks: Task[];\n}\n\nexport const Component: React.FC\u003cComponentProps\u003e = ({ tasks }) =\u003e {\n  const [filterStatus, setFilterStatus] = useState\u003cstring\u003e('all');\n  const [searchTerm, setSearchTerm] = useState\u003cstring\u003e('');\n\n  const getPriorityBadge = (priority: number) =\u003e {\n    switch (priority) {\n      case 1:\n        return \u003cBadge bg=\"success\"\u003eLow\u003c/Badge\u003e;\n      case 2:\n        return \u003cBadge bg=\"warning\"\u003eMedium\u003c/Badge\u003e;\n      case 3:\n        return \u003cBadge bg=\"danger\"\u003eHigh\u003c/Badge\u003e;\n      default:\n        return \u003cBadge bg=\"secondary\"\u003eUnknown\u003c/Badge\u003e;\n    }\n  };\n\n  const getStatusBadge = (status: string) =\u003e {\n    switch (status.toLowerCase()) {\n      case 'todo':\n      case 'to do':\n      case 'not started':\n        return \u003cBadge bg=\"secondary\"\u003eTo Do\u003c/Badge\u003e;\n      case 'in progress':\n        return \u003cBadge bg=\"primary\"\u003eIn Progress\u003c/Badge\u003e;\n      case 'done':\n      case 'completed':\n        return \u003cBadge bg=\"success\"\u003eCompleted\u003c/Badge\u003e;\n      default:\n        return \u003cBadge bg=\"info\"\u003e{status}\u003c/Badge\u003e;\n    }\n  };\n\n  const formatDate = (dateString: string) =\u003e {\n    if (!dateString) return 'N/A';\n    const date = new Date(dateString);\n    return date.toLocaleDateString();\n  };\n\n  const isOverdue = (dueDate: string, status: string) =\u003e {\n    if (!dueDate || status.toLowerCase() === 'done' || status.toLowerCase() === 'completed') return false;\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const taskDueDate = new Date(dueDate);\n    taskDueDate.setHours(0, 0, 0, 0);\n    return taskDueDate \u003c today;\n  };\n\n  const filteredTasks = tasks.filter(task =\u003e {\n    const matchesStatus = filterStatus === 'all' || task.status.toLowerCase() === filterStatus.toLowerCase();\n    const matchesSearch = task.title.toLowerCase().includes(searchTerm.toLowerCase()) || \n                         task.description.toLowerCase().includes(searchTerm.toLowerCase());\n    return matchesStatus \u0026\u0026 matchesSearch;\n  });\n\n  return (\n    \u003cCard\u003e\n      \u003cCard.Header className=\"d-flex justify-content-between align-items-center\"\u003e\n        \u003ch4\u003eAlice Johnson's Tasks\u003c/h4\u003e\n        \u003cdiv className=\"d-flex gap-3\"\u003e\n          \u003cForm.Group\u003e\n            \u003cForm.Control \n              type=\"text\" \n              placeholder=\"Search tasks...\" \n              value={searchTerm}\n              onChange={(e) =\u003e setSearchTerm(e.target.value)}\n            /\u003e\n          \u003c/Form.Group\u003e\n          \u003cForm.Group\u003e\n            \u003cForm.Select \n              value={filterStatus} \n              onChange={(e) =\u003e setFilterStatus(e.target.value)}\n            \u003e\n              \u003coption value=\"all\"\u003eAll Statuses\u003c/option\u003e\n              \u003coption value=\"todo\"\u003eTo Do\u003c/option\u003e\n              \u003coption value=\"in progress\"\u003eIn Progress\u003c/option\u003e\n              \u003coption value=\"done\"\u003eCompleted\u003c/option\u003e\n            \u003c/Form.Select\u003e\n          \u003c/Form.Group\u003e\n        \u003c/div\u003e\n      \u003c/Card.Header\u003e\n      \u003cCard.Body\u003e\n        {filteredTasks.length \u003e 0 ? (\n          \u003cTable striped hover responsive\u003e\n            \u003cthead\u003e\n              \u003ctr\u003e\n                \u003cth\u003eTitle\u003c/th\u003e\n                \u003cth\u003eDescription\u003c/th\u003e\n                \u003cth\u003eStatus\u003c/th\u003e\n                \u003cth\u003ePriority\u003c/th\u003e\n                \u003cth\u003eDue Date\u003c/th\u003e\n              \u003c/tr\u003e\n            \u003c/thead\u003e\n            \u003ctbody\u003e\n              {filteredTasks.map(task =\u003e (\n                \u003ctr key={task.id} className={isOverdue(task.due_date, task.status) ? 'table-danger' : ''}\u003e\n                  \u003ctd\u003e{task.title}\u003c/td\u003e\n                  \u003ctd\u003e{task.description}\u003c/td\u003e\n                  \u003ctd\u003e{getStatusBadge(task.status)}\u003c/td\u003e\n                  \u003ctd\u003e{getPriorityBadge(task.priority)}\u003c/td\u003e\n                  \u003ctd\u003e\n                    {formatDate(task.due_date)}\n                    {isOverdue(task.due_date, task.status) \u0026\u0026 (\n                      \u003cBadge bg=\"danger\" className=\"ms-2\"\u003eOverdue\u003c/Badge\u003e\n                    )}\n                  \u003c/td\u003e\n                \u003c/tr\u003e\n              ))}\n            \u003c/tbody\u003e\n          \u003c/Table\u003e\n        ) : (\n          \u003cdiv className=\"text-center p-4\"\u003e\n            \u003cp className=\"mb-0\"\u003eNo tasks found matching the current filters.\u003c/p\u003e\n          \u003c/div\u003e\n        )}\n      \u003c/Card.Body\u003e\n      \u003cCard.Footer\u003e\n        \u003cdiv className=\"d-flex justify-content-between align-items-center\"\u003e\n          \u003cspan\u003eTotal: {filteredTasks.length} task(s)\u003c/span\u003e\n        \u003c/div\u003e\n      \u003c/Card.Footer\u003e\n    \u003c/Card\u003e\n  );\n};"
  }
}